(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************!*\
  !*** ./src/NeuralNetworks/activationFunctions.ts ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Activations = (function () {\n    function Activations() {\n    }\n    return Activations;\n}());\nActivations.TANH = {\n    output: function (x) { return Math.tanh(x); },\n    der: function (x) {\n        var output = Activations.TANH.output(x);\n        return 1 - output * output;\n    }\n};\nActivations.SIGMOID = {\n    output: function (x) { return 1 / (1 + Math.exp(-x)); },\n    der: function (x) {\n        var output = Activations.SIGMOID.output(x);\n        return output * (1 - output);\n    }\n};\nActivations.RELU = {\n    output: function (x) { return Math.max(0, x); },\n    der: function (x) { return x <= 0 ? 0 : 1; }\n};\nActivations.LINEAR = {\n    output: function (x) { return x; },\n    der: function (x) { return 1; }\n};\nexports.Activations = Activations;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9OZXVyYWxOZXR3b3Jrcy9hY3RpdmF0aW9uRnVuY3Rpb25zLnRzP2NkZmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQWN0aXZhdGlvbnMgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFjdGl2YXRpb25zKCkge1xuICAgIH1cbiAgICByZXR1cm4gQWN0aXZhdGlvbnM7XG59KCkpO1xuQWN0aXZhdGlvbnMuVEFOSCA9IHtcbiAgICBvdXRwdXQ6IGZ1bmN0aW9uICh4KSB7IHJldHVybiBNYXRoLnRhbmgoeCk7IH0sXG4gICAgZGVyOiBmdW5jdGlvbiAoeCkge1xuICAgICAgICB2YXIgb3V0cHV0ID0gQWN0aXZhdGlvbnMuVEFOSC5vdXRwdXQoeCk7XG4gICAgICAgIHJldHVybiAxIC0gb3V0cHV0ICogb3V0cHV0O1xuICAgIH1cbn07XG5BY3RpdmF0aW9ucy5TSUdNT0lEID0ge1xuICAgIG91dHB1dDogZnVuY3Rpb24gKHgpIHsgcmV0dXJuIDEgLyAoMSArIE1hdGguZXhwKC14KSk7IH0sXG4gICAgZGVyOiBmdW5jdGlvbiAoeCkge1xuICAgICAgICB2YXIgb3V0cHV0ID0gQWN0aXZhdGlvbnMuU0lHTU9JRC5vdXRwdXQoeCk7XG4gICAgICAgIHJldHVybiBvdXRwdXQgKiAoMSAtIG91dHB1dCk7XG4gICAgfVxufTtcbkFjdGl2YXRpb25zLlJFTFUgPSB7XG4gICAgb3V0cHV0OiBmdW5jdGlvbiAoeCkgeyByZXR1cm4gTWF0aC5tYXgoMCwgeCk7IH0sXG4gICAgZGVyOiBmdW5jdGlvbiAoeCkgeyByZXR1cm4geCA8PSAwID8gMCA6IDE7IH1cbn07XG5BY3RpdmF0aW9ucy5MSU5FQVIgPSB7XG4gICAgb3V0cHV0OiBmdW5jdGlvbiAoeCkgeyByZXR1cm4geDsgfSxcbiAgICBkZXI6IGZ1bmN0aW9uICh4KSB7IHJldHVybiAxOyB9XG59O1xuZXhwb3J0cy5BY3RpdmF0aW9ucyA9IEFjdGl2YXRpb25zO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvTmV1cmFsTmV0d29ya3MvYWN0aXZhdGlvbkZ1bmN0aW9ucy50c1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 1 */
/* unknown exports provided */
/* all exports used */
/*!***********************************!*\
  !*** ./src/NeuralNetworks/ann.ts ***!
  \***********************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar FeedForward;\n(function (FeedForward) {\n    var Layer = (function () {\n        function Layer(options) {\n            this.options = options;\n            // neurons[0] â†’ Bias Unit\n            this.neurons = [];\n            // +1 for one bias unit\n            for (var n = 0; n < options.numberOfNeurons + 1; n++) {\n                this.neurons.push(new Neuron({\n                    index: n,\n                    isBiasUnit: n == options.numberOfNeurons,\n                    netOptions: options.netOptions,\n                    numberOfNeuronsInNextLayer: options.numberOfNeuronsInNextLayer\n                }));\n            }\n        }\n        Layer.prototype.forEachNeuron = function (func, excludeBias) {\n            if (excludeBias === void 0) { excludeBias = false; }\n            for (var i = 0; i < this.neurons.length - (excludeBias ? 1 : 0); i++) {\n                var neuron = this.neurons[i];\n                // Bias units are the last ones\n                func(neuron, neuron.getIndex());\n            }\n        };\n        return Layer;\n    }());\n    var Neuron = (function () {\n        // Bias units are the last ones in array\n        function Neuron(options) {\n            this.options = options;\n            this.weights = [];\n            if (this.isBias())\n                this.output = 1;\n            // Generate weights\n            for (var n = 0; n < options.numberOfNeuronsInNextLayer; n++) {\n                this.weights.push(new Weight());\n            }\n            // set shorthand for activation function\n            this.activationFunction = this.options.netOptions.activationFunction;\n        }\n        /**\n         * Forward pass of values through the neuron using the prevLayer\n         * @param prevLayer i\n         */\n        Neuron.prototype.propagateForward = function (prevLayer) {\n            var _this = this;\n            if (this.isBias()) {\n                throw 'A bias unit should not propagate a value forward.';\n            }\n            var sigma = 0;\n            prevLayer.forEachNeuron(function (n) {\n                sigma += n.output * n.getWeightTo(_this).value;\n            });\n            this.input = sigma;\n            this.output = this.activationFunction.output(this.input);\n        };\n        /**\n         * Calculates the delta of an output neuron using the derivative term of the specified error function of the network and the target value\n         * @param target target value for this output neuron\n         */\n        Neuron.prototype.calculateOutputLayerDelta = function (target) {\n            if (this.isBias())\n                throw 'There should not be an output layer delta calculation for a bias unit for it is never used.';\n            this.delta = this.options.netOptions.errorFunction.der(this.output, target) * this.activationFunction.der(this.input);\n        };\n        /**\n         * Calculates the delta values for neurons in a hidden layer j using the next layer k\n         * @param nextLayer k\n         */\n        Neuron.prototype.calculateHiddenLayerDelta = function (nextLayer) {\n            var _this = this;\n            if (this.isBias())\n                throw 'There should not be an hidden layer delta calculation for a bias unit for it is not connected to the previous layer.';\n            var sigma = 0;\n            nextLayer.forEachNeuron(function (n, i) {\n                sigma += n.delta * _this.weights[i].value;\n            }, true);\n            this.delta = this.activationFunction.der(this.input) * sigma;\n        };\n        /**\n         * Updates the weights which connect the previous layer to the current one using this layer neurons delta values and the output of the previous layer neurons\n         * @param prevLayer the previous layer i\n         */\n        Neuron.prototype.updateWeights = function (prevLayer) {\n            var _this = this;\n            prevLayer.forEachNeuron(function (n, i) {\n                var oldWeight = n.weights[_this.getIndex()];\n                var derivativeTerm = n.output * _this.delta;\n                oldWeight.value -= _this.options.netOptions.learningRate * derivativeTerm;\n            });\n        };\n        ;\n        /**\n         * Get the weight to a neuron in the next layer k from current layer k\n         * Weights to layer k are stored in neurons of layer j\n         * @param n Neuron in next layer k\n         */\n        Neuron.prototype.getWeightTo = function (n) {\n            return this.weights[n.getIndex()];\n        };\n        /**\n         * @returns true if the neuron is a bias unit which means it has a constant output of 1\n         * Info: Bias units are the last ones in the neurons array in each layer object\n         */\n        Neuron.prototype.isBias = function () {\n            return this.options.isBiasUnit;\n        };\n        /**\n         * @returns the index of the current neuron in its layer ranging from 1 to number of specified neurons in layer + 1 because an extra bias neuron is added at the end of neurons array in a layer object.\n         */\n        Neuron.prototype.getIndex = function () {\n            return this.options.index;\n        };\n        return Neuron;\n    }());\n    var Weight = (function () {\n        function Weight(value) {\n            if (value === void 0) { value = Math.random(); }\n            this.value = value;\n        }\n        return Weight;\n    }());\n    var Network = (function () {\n        function Network(options) {\n            this.options = options;\n            this.layers = [];\n            // Create net's layers\n            for (var l = 0; l < options.layers.length; l++) {\n                this.layers.push(new Layer({\n                    netOptions: options,\n                    numberOfNeurons: options.layers[l],\n                    numberOfNeuronsInNextLayer: options.layers[l + 1] || 0\n                }));\n            }\n        }\n        Object.defineProperty(Network.prototype, \"inputLayer\", {\n            /**\n             * @returns the input layer\n             */\n            get: function () {\n                return this.layers[0];\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Network.prototype, \"outputLayer\", {\n            /**\n             * @returns the output layer\n             */\n            get: function () {\n                return this.layers[this.layers.length - 1];\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Forward Pass of the network where values are propagated through the network\n         * @param inputs input values matching the specified size of the network's input layer\n         */\n        Network.prototype.propagateForward = function (inputs) {\n            if (inputs.length != this.inputLayer.neurons.length - 1) {\n                throw \"Inputs do not match network size!\";\n            }\n            // Set input layer neurons output to input values; exclude bias of course\n            this.inputLayer.forEachNeuron(function (n, i) { return n.output = inputs[i]; }, true);\n            var _loop_1 = function (l) {\n                var layer = this_1.layers[l];\n                var prevLayer = this_1.layers[l - 1];\n                layer.forEachNeuron(function (n) { return n.propagateForward(prevLayer); }, true);\n            };\n            var this_1 = this;\n            // propagate values forward through layer starting from first hidden layer\n            for (var l = 1; l < this.layers.length; l++) {\n                _loop_1(l);\n            }\n            return this;\n        };\n        /**\n         * @returns the current output of the network\n         */\n        Network.prototype.getCurrentOutput = function () {\n            return this.outputLayer.neurons.map(function (n) { return n.output; }).slice(0, -1);\n        };\n        /**\n         * Calculate all the neurons delta values\n         * @param targetValues target values for the network with respect to last forward pass\n         */\n        Network.prototype.calculateDeltas = function (targetValues) {\n            // calculate Output layer calculateDeltas\n            this.outputLayer.forEachNeuron(function (n, i) { return n.calculateOutputLayerDelta(targetValues[i]); }, true);\n            var _loop_2 = function (l) {\n                var layer = this_2.layers[l];\n                var nextLayer = this_2.layers[l + 1];\n                layer.forEachNeuron(function (n) { return n.calculateHiddenLayerDelta(nextLayer); }, true);\n            };\n            var this_2 = this;\n            // propagate error backwards through hidden layers\n            for (var l = this.layers.length - 2; l > 0; l--) {\n                _loop_2(l);\n            }\n            return this;\n        };\n        /**\n         * Update the connection weights using previous calculated delta values\n         */\n        Network.prototype.updateWeights = function () {\n            var _loop_3 = function (l) {\n                var layer = this_3.layers[l];\n                var prevLayer = this_3.layers[l - 1];\n                layer.forEachNeuron(function (n) { return n.updateWeights(prevLayer); }, true);\n            };\n            var this_3 = this;\n            // go through all layers except input layer and update all the weights with the calculated deltaValues.\n            for (var l = 1; l < this.layers.length; l++) {\n                _loop_3(l);\n            }\n            return this;\n        };\n        /**\n         * Fits given inputs to given target values by training the network\n         * @param inputs inputs to the network\n         * @param targetValues expected outputs for given input\n         */\n        Network.prototype.fit = function (inputs, targetValues) {\n            this.propagateForward(inputs).calculateDeltas(targetValues).updateWeights();\n            return this;\n        };\n        /**\n         * Predict output values for given inputs\n         * @param inputs input values\n         */\n        Network.prototype.predict = function (inputs) {\n            return this.propagateForward(inputs).getCurrentOutput();\n        };\n        /**\n         * Calculate the error for current outputs\n         * @param targetValues target values\n         */\n        Network.prototype.getCurrentError = function (targetValues) {\n            var _this = this;\n            return this.getCurrentOutput().reduce(function (s, o, i) {\n                return s + _this.options.errorFunction.error(o, targetValues[i]);\n            }, 0);\n        };\n        /**\n         * Calculates the error for given inputs\n         * @param inputs inputs to network\n         * @param targetValues expected output for given inputs\n         */\n        Network.prototype.error = function (inputs, targetValues) {\n            this.propagateForward(inputs);\n            return this.getCurrentError(targetValues);\n        };\n        return Network;\n    }());\n    FeedForward.Network = Network;\n})(FeedForward = exports.FeedForward || (exports.FeedForward = {}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 2 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************!*\
  !*** ./src/NeuralNetworks/errorFunctions.ts ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Errors = (function () {\n    function Errors() {\n    }\n    return Errors;\n}());\nErrors.SQUARE = {\n    error: function (output, target) { return 0.5 * Math.pow(output - target, 2); },\n    der: function (output, target) { return output - target; }\n};\nexports.Errors = Errors;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9OZXVyYWxOZXR3b3Jrcy9lcnJvckZ1bmN0aW9ucy50cz9kYzkzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEVycm9ycyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRXJyb3JzKCkge1xuICAgIH1cbiAgICByZXR1cm4gRXJyb3JzO1xufSgpKTtcbkVycm9ycy5TUVVBUkUgPSB7XG4gICAgZXJyb3I6IGZ1bmN0aW9uIChvdXRwdXQsIHRhcmdldCkgeyByZXR1cm4gMC41ICogTWF0aC5wb3cob3V0cHV0IC0gdGFyZ2V0LCAyKTsgfSxcbiAgICBkZXI6IGZ1bmN0aW9uIChvdXRwdXQsIHRhcmdldCkgeyByZXR1cm4gb3V0cHV0IC0gdGFyZ2V0OyB9XG59O1xuZXhwb3J0cy5FcnJvcnMgPSBFcnJvcnM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9OZXVyYWxOZXR3b3Jrcy9lcnJvckZ1bmN0aW9ucy50c1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 3 */
/* unknown exports provided */
/* all exports used */
/*!*********************************!*\
  !*** ./src/helper-functions.ts ***!
  \*********************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction repeat(func, iterations) {\n    for (var i = 0; i < iterations; i++) {\n        func(i);\n    }\n}\nexports.repeat = repeat;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9oZWxwZXItZnVuY3Rpb25zLnRzPzE2OWUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiByZXBlYXQoZnVuYywgaXRlcmF0aW9ucykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlcmF0aW9uczsgaSsrKSB7XG4gICAgICAgIGZ1bmMoaSk7XG4gICAgfVxufVxuZXhwb3J0cy5yZXBlYXQgPSByZXBlYXQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9oZWxwZXItZnVuY3Rpb25zLnRzXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 4 */
/* unknown exports provided */
/* all exports used */
/*!***********************!*\
  !*** ./src/matrix.ts ***!
  \***********************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Matrix = (function () {\n    function Matrix(p1, p2) {\n        if (typeof p1 == 'object') {\n            this.data = p1;\n        }\n        else {\n            this.data = Matrix.get2DArray(p1, p2);\n        }\n    }\n    Matrix.get2DArray = function (m, n, fill) {\n        if (fill === void 0) { fill = 0; }\n        return new Array(m).fill(0).map(function (r) { return new Array(n).fill(fill); });\n    };\n    Matrix.rowVector = function () {\n        var components = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            components[_i] = arguments[_i];\n        }\n        return new Matrix([components]);\n    };\n    Matrix.columnVector = function () {\n        var components = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            components[_i] = arguments[_i];\n        }\n        var v = components.map(function (c) { return [c]; });\n        return new Matrix(v);\n    };\n    Matrix.rand = function (rows, columns) {\n        var m = new Matrix(rows, columns);\n        m.map(function (v) { return Math.random(); });\n        return m;\n    };\n    Matrix.ones = function (rows, columns) {\n        var m = new Matrix(rows, columns);\n        m.fill(1);\n        return m;\n    };\n    Matrix.eye = function (size) {\n        var m = new Matrix(size, size);\n        for (var i = 0; i < size; i++)\n            m.set(i, i, 1);\n        return m;\n    };\n    Matrix.join = function (m1, m2, pos) {\n        if (pos === void 0) { pos = 'bottom'; }\n        var newData;\n        switch (pos) {\n            case 'top':\n                newData = m2.data.concat(m1.data);\n                break;\n            case 'bottom':\n                newData = m1.data.concat(m2.data);\n                break;\n            case 'left':\n                newData = m1.data.map(function (r, i) { return m2.data[i].concat(r); });\n                break;\n            case 'right':\n                newData = m1.data.map(function (r, i) { return r.concat(m2.data[i]); });\n                break;\n            default:\n                break;\n        }\n        return new Matrix(newData);\n    };\n    Matrix.prototype.getNumberOfRows = function () {\n        return this.data.length;\n    };\n    Matrix.prototype.getNumberOfColumns = function () {\n        return this.data[0].length;\n    };\n    Matrix.prototype.getDimensions = function () {\n        return [this.getNumberOfRows(), this.getNumberOfColumns()];\n    };\n    Matrix.prototype.set = function (row, column, val) {\n        this.data[row][column] = val;\n    };\n    Matrix.prototype.get = function (row, column) {\n        return this.data[row][column];\n    };\n    Matrix.prototype.getRowAsRowVector = function (row) {\n        // Copy without reference\n        var v = new Matrix([this.data[row].slice()]);\n        return v;\n    };\n    Matrix.prototype.getColumnAsRowVector = function (column) {\n        // Copy without reference\n        var v = [];\n        for (var _i = 0, _a = this.data; _i < _a.length; _i++) {\n            var row = _a[_i];\n            v.push(row[column]);\n        }\n        return new Matrix([v]);\n    };\n    Matrix.prototype.getAsScalar = function () {\n        if (this.getDimensions().every(function (d) { return d == 1; })) {\n            return this.get(0, 0);\n        }\n        else {\n            this.error('size', 'getAsFloat (matrix must be 1x1)');\n        }\n    };\n    Matrix.prototype.getArray = function () {\n        // Deep copy without reference\n        return this.data.map(function (r) { return r.slice(); });\n    };\n    Matrix.prototype.copy = function () {\n        return new Matrix(this.getArray());\n    };\n    // endRow and endColumn exclusive if positive\n    // startRow and startColumn exclusive if negative\n    Matrix.prototype.slice = function (startRow, endRow, startColumn, endColumn) {\n        //Handle negatives\n        if (endRow < 0) {\n            endRow = this.getNumberOfRows() + (endRow + 1);\n        }\n        if (startRow < 0) {\n            startRow = this.getNumberOfRows() + (startRow + 1);\n        }\n        if (endColumn < 0) {\n            endColumn = this.getNumberOfColumns() + (endColumn + 1);\n        }\n        if (startColumn < 0) {\n            startColumn = this.getNumberOfColumns() + (startColumn + 1);\n        }\n        var res = new Matrix(endRow - startRow, endColumn - startColumn);\n        for (var row = startRow; row < endRow; row++) {\n            for (var column = startColumn; column < endColumn; column++) {\n                res.set(row - startRow, column - startColumn, this.get(row, column));\n            }\n        }\n        return res;\n    };\n    Matrix.prototype.map = function (func) {\n        for (var i = 0; i < this.getNumberOfRows(); i++) {\n            for (var j = 0; j < this.getNumberOfColumns(); j++) {\n                this.data[i][j] = func(this.data[i][j], i, j);\n            }\n        }\n        return this;\n    };\n    Matrix.prototype.forEach = function (func) {\n        for (var i = 0; i < this.getNumberOfRows(); i++) {\n            for (var j = 0; j < this.getNumberOfColumns(); j++) {\n                func(this.data[i][j], i, j);\n            }\n        }\n        return this;\n    };\n    Matrix.prototype.fill = function (newVal) {\n        this.map(function (v) { return newVal; });\n    };\n    Matrix.prototype.scale = function (scl) {\n        return this.map(function (v) { return v * scl; });\n    };\n    Matrix.prototype.add = function (m) {\n        if (!this.hasSameDimensions(m))\n            this.error('size', 'addition');\n        return this.map(function (v, row, col) { return v + m.get(row, col); });\n    };\n    Matrix.prototype.subtract = function (m) {\n        if (!this.hasSameDimensions(m))\n            this.error('size', 'subtraction');\n        return this.map(function (v, row, col) { return v - m.get(row, col); });\n    };\n    Matrix.prototype.multiply = function (m) {\n        if (!this.hasSameDimensions(m))\n            this.error('size', 'multiplication');\n        return this.map(function (v, row, col) { return v * m.get(row, col); });\n    };\n    Matrix.prototype.divide = function (m) {\n        if (!this.hasSameDimensions(m))\n            this.error('size', 'division');\n        return this.map(function (v, row, col) { return v / m.get(row, col); });\n    };\n    Matrix.prototype.dot = function (m) {\n        if (!(this.getNumberOfColumns() == m.getNumberOfRows()))\n            this.error('size', 'dot product');\n        var newData = Matrix.get2DArray(this.getNumberOfRows(), m.getNumberOfColumns());\n        for (var v = 0; v < m.getNumberOfColumns(); v++) {\n            for (var r = 0; r < this.getNumberOfRows(); r++) {\n                for (var i = 0; i < m.getNumberOfRows(); i++) {\n                    newData[r][v] += m.get(i, v) * this.get(r, i);\n                }\n            }\n        }\n        this.data = newData;\n        return this;\n    };\n    Matrix.prototype.transpose = function () {\n        var newData = Matrix.get2DArray(this.getNumberOfColumns(), this.getNumberOfRows());\n        this.forEach(function (v, row, col) {\n            newData[col][row] = v;\n        });\n        this.data = newData;\n        return this;\n    };\n    Matrix.prototype.min = function () {\n        var minValues = [];\n        for (var c = 0; c < this.getNumberOfColumns(); c++) {\n            var column = this.getColumnAsRowVector(c).getArray()[0];\n            minValues.push(Math.min.apply(Math, column));\n        }\n        return Matrix.rowVector.apply(Matrix, minValues);\n    };\n    Matrix.prototype.max = function () {\n        var maxValues = [];\n        for (var c = 0; c < this.getNumberOfColumns(); c++) {\n            var column = this.getColumnAsRowVector(c).getArray()[0];\n            maxValues.push(Math.max.apply(Math, column));\n        }\n        return Matrix.rowVector.apply(Matrix, maxValues);\n    };\n    Matrix.prototype.hasSameDimensions = function (m) {\n        if (m.getNumberOfColumns() == this.getNumberOfColumns() && m.getNumberOfRows() == this.getNumberOfRows()) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    Matrix.prototype.error = function (code, operation) {\n        switch (code) {\n            case 'size':\n                throw \"Matrices not not have the right sizes for operation \" + operation;\n            default:\n                throw \"Error!\";\n        }\n    };\n    Matrix.prototype.show = function () {\n        console.log(this.getAsString());\n        return this;\n    };\n    Matrix.prototype.getAsString = function (markup, joinChar, lineSpaceChar, end, fixed) {\n        var _this = this;\n        if (markup === void 0) { markup = true; }\n        if (joinChar === void 0) { joinChar = '\\t'; }\n        if (lineSpaceChar === void 0) { lineSpaceChar = ' '; }\n        if (end === void 0) { end = '\\n'; }\n        if (fixed === void 0) { fixed = 3; }\n        if (!markup) {\n            return this.data.map(function (r) { return r.map(function (n) { return n.toFixed(fixed); }).join('\\t'); }).join('\\n') + end;\n        }\n        else {\n            return this.data.map(function (r, i) {\n                var middlePart = r.map(function (n) { return n.toFixed(fixed); }).join(joinChar);\n                if (i == 0 && _this.data.length == 1) {\n                    return \"[\" + lineSpaceChar + middlePart + lineSpaceChar + \"]\";\n                }\n                else if (i == 0) {\n                    return \"\\u23A1\" + lineSpaceChar + middlePart + lineSpaceChar + \"\\u23A4\";\n                }\n                else if (i == _this.data.length - 1) {\n                    return \"\\u23A3\" + lineSpaceChar + middlePart + lineSpaceChar + \"\\u23A6\";\n                }\n                else {\n                    return \"\\u239C\" + lineSpaceChar + middlePart + lineSpaceChar + \"\\u239F\";\n                }\n            }).join('\\n') + end;\n        }\n    };\n    return Matrix;\n}());\nexports.Matrix = Matrix;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 5 */
/* unknown exports provided */
/* all exports used */
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(/*! ./matrix */ 4));\n__export(__webpack_require__(/*! ./NeuralNetworks/ann */ 1));\n__export(__webpack_require__(/*! ./NeuralNetworks/activationFunctions */ 0));\n__export(__webpack_require__(/*! ./NeuralNetworks/errorFunctions */ 2));\n__export(__webpack_require__(/*! ./helper-functions */ 3));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9pbmRleC50cz9kMWU3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gX19leHBvcnQobSkge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL21hdHJpeFwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9OZXVyYWxOZXR3b3Jrcy9hbm5cIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vTmV1cmFsTmV0d29ya3MvYWN0aXZhdGlvbkZ1bmN0aW9uc1wiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9OZXVyYWxOZXR3b3Jrcy9lcnJvckZ1bmN0aW9uc1wiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9oZWxwZXItZnVuY3Rpb25zXCIpKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2luZGV4LnRzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ })
/******/ ])));